})
y<-  apply(data[, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1])>0)
min(x[whichdates])
})
y <-  apply(data[, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1])>0)
min(x[whichdates])
})
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1])>0)
min(x[whichdates])
})
y
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1])>0)
# min(x[whichdates])
})
y
data[1, c("DateConsent",testDate.names)]
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1]))
whichdates <- (difftime(x, x[1])>0)
# min(x[whichdates])
})
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days"))
whichdates <- (difftime(x, x[1], units="days")>0)
# min(x[whichdates])
})
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days")+21>0)
whichdates <- (difftime(x, x[1], units="days")+21>0)
# min(x[whichdates])
})
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days")+21>0)
whichdates <- (difftime(x, x[1], units="days")+21>0)
min(x[whichdates])
})
y
y <- apply(data[1, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days")+21>0)
whichdates <- (difftime(x, x[1], units="days")+21>0)
min(x[whichdates], na.rm=T)
})
y
data[1, c("DateConsent",testDate.names)]
data[2, c("DateConsent",testDate.names)]
y <- apply(data[2, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days")+21>0)
whichdates <- (difftime(x, x[1], units="days")+21>0)
min(x[whichdates], na.rm=T)
})
y
data[3, c("DateConsent",testDate.names)]
y <- apply(data[3, c("DateConsent",testDate.names)], 1, function(x){
print(difftime(x, x[1], units="days")+21>0)
whichdates <- (difftime(x, x[1], units="days")+21>0)
min(x[whichdates], na.rm=T)
})
y
data[4, c("DateConsent",testDate.names)]
data[5, c("DateConsent",testDate.names)]
data[6, c("DateConsent",testDate.names)]
data[7, c("DateConsent",testDate.names)]
data[8, c("DateConsent",testDate.names)]
data[9, c("DateConsent",testDate.names)]
data[10, c("DateConsent",testDate.names)]
data[11, c("DateConsent",testDate.names)]
y <- apply(data[, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1], units="days")+threeWeeks>0)
min(x[whichdates], na.rm=T)
})
threeWeeks <- 21
sixWeeks  <- 42
twoMonths <- 63
y <- apply(data[, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1], units="days")+threeWeeks>0)
min(x[whichdates], na.rm=T)
})
library(IDEAdectree)
library(IDEAdectree)
data <- readFromDatabaseExtract()
library("XLConnect", lib.loc="~/R/win-library/3.2")
data <- readFromDatabaseExtract()
library("plyr", lib.loc="~/R/win-library/3.2")
data <- readFromDatabaseExtract()
data <- cleanData(data)
load("C:/Users/ngreen1/Dropbox/TB/IDEA/R/packaged/IDEAdectree/data/TBdata_clinical_cleaned.RData")
data <- readFromDatabaseExtract()
source('C:/Users/ngreen1/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/clean-data-fns.R', echo=TRUE)
names(data) <- gsub("testRes", "", names(data))
# Discretised groups --------------------------------------------------------
data$TSTcut <- cut(data$TST, breaks=c(0,6,15,100), right=FALSE)  #used by Yemesi @ Bham
test.names <- c("QFN", "TSPOT", "TST", "TSTcut", "Smear", "TBcult", "CSF", "BAL",
"HistBiop", "NeedleAsp", "PCR", "CXR", "CT", "MRI")
data[,c(test.names,"Othertest1Res","Othertest2Res")] <- data.frame(apply(data[,c(test.names,"Othertest1Res","Othertest2Res")], 2, toupper))
data$IGRA <- combineTestResults(data$QFN, data$TSPOT)
data$imaging <- combineTestResults(data$CT, data$MRI)
# Combine with BCG status -------------------------------------------------------------
data$TSTres <- ""
data$TSTres[!is.na(data$TST) & data$TSTcut!="[0,6)" & data$PrevBCG==FALSE] <- "POSITIVE"
data$TSTres[!is.na(data$TST) & data$TSTcut=="[15,100)" & data$PrevBCG==TRUE] <- "POSITIVE"
data$TSTres[!is.na(data$TST) & data$TSTcut=="[0,6)"] <- "NEGATIVE"
data$TSTres[!is.na(data$TST) & data$TSTcut=="[6,15)" & data$PrevBCG==TRUE] <- "NEGATIVE"
data$IGRA[data$IGRA=="BORDERLINE"] <- NA
data$IGRA[data$IGRA=="INDETERMINATE"] <- NA
data$IGRAorTST <- combineTestResults(data$TSTres, data$IGRA)
# look for PET in Othertests---------------------------------------------
PETtest1taken <- grepl("PET", data$Othertest1Name, ignore.case=TRUE)
PETtest2taken <- grepl("PET", data$Othertest2Name, ignore.case=TRUE)
## PET test results, when taken
PET1 <- PET2 <- rep(NA, nrow(data))
PET1[PETtest1taken] <- as.character(data$Othertest1Res[PETtest1taken])
PET2[PETtest2taken] <- as.character(data$Othertest2Res[PETtest2taken])
data$PET <- combineTestResults(PET1, PET2)
## PET test date, when taken. When both dates use test 2 (?)
PETtestDate <- rep(as.Date("1900-01-01"), nrow(data))
PETtestDate[PETtest1taken] <- as.Date.POSIX(data$Othertest1Date[PETtest1taken])
PETtestDate[PETtest2taken] <- as.Date.POSIX(data$Othertest2Date[PETtest2taken])
data$PETtestDate <- PETtestDate
test.names <- c("IGRA", "imaging", test.names, "PET", "TSTres", "IGRAorTST")
data <- joinWithLookups(data)
# Dates -------------------------------------------------------------------
threeWeeks <- 21
sixWeeks  <- 42
twoMonths <- 63
TBdrugStart.names <- c("TBdrug1Start", "TBdrug2Start", "TBdrug3Start", "TBdrug4Start", "TBdrug5Start", "TBdrug6Start")
TBDrugEnd.names <- c("TBDrug1End", "TBDrug2End", "TBDrug3End", "TBDrug4End", "TBDrug5End", "TBDrug6End")
testDate.names <- c("TBculttestDate","QFNtestDate", "TSPOTtestDate", "TSTtestDate", "SmeartestDate", "BALtestDate", "HistBioptestDate",
"NeedleAsptestDate", "PCRtestDate", "CXRtestDate", "CTtestDate", "MRItestDate", "Othertest1Date", "Othertest2Date","PETtestDate")
for (i in c(TBdrugStart.names, TBDrugEnd.names, testDate.names,
"EntryUK", "DateDiagCon", "DateConsent")){
data[,i] <- as.Date.POSIX(data[,i])
}
## missing dates
data[data=="1900-01-01"] <- NA
data$EntryUK_year <- year(data$EntryUK)
## how can we know which are filled-in dates and which are the accurate ones?
## take the hit of omitting info for true dates too
## not so bad for day-month but for day this is not good
### ie all Junes or all 1st of month dates
for (i in 1:ncol(data)){
data[grepl("-06-15", data[,i]),i] <- NA}
assert.dateinpast(data, testDate.names)
## combine drug start dates for multiple patient records
for (id in unique(data$PatientStudyID)[!is.na(unique(data$PatientStudyID))]){
for (i in TBdrugStart.names){
data[data$PatientStudyID==id & !is.na(data$PatientStudyID), i] <-
min(data[data$PatientStudyID==id & !is.na(data$PatientStudyID), i], na.rm=T)
}
for (j in TBDrugEnd.names){
data[data$PatientStudyID==id & !is.na(data$PatientStudyID), j] <-
min(data[data$PatientStudyID==id & !is.na(data$PatientStudyID), j], na.rm=T)
}
}
data$TBDrugStart.min <- apply(data[,TBdrugStart.names], 1, min, na.rm=T)
data$TBDrugEnd.max   <- apply(data[,TBDrugEnd.names], 1, max, na.rm=T)
data$testDate.min    <- apply(data[, c("DateConsent",testDate.names)], 1, function(x){
whichdates <- (difftime(x, x[1], units="days")+threeWeeks>0)
min(x[whichdates], na.rm=T)
})
data$testDate.min
data$TBDrugStart.min <- as.Date.POSIX(data$TBDrugStart.min)
data$TBDrugEnd.max   <- as.Date.POSIX(data$TBDrugEnd.max)
data$testDate.min    <- as.Date.POSIX(data$testDate.min)
data$DateVisitFU <- as.Date.POSIX(data$DateVisitFU)
# lower limits culture report dates -----------------------------------------
dur <- c(POSITIVE=1, NEGATIVE=sixWeeks)   #days
data$TBculttestDate.orig <- data$TBculttestDate
dur.each <- as.vector(dur[as.character(data$TBcult)])
data <- transform(data, TBculttestDate.resMin = testDate.min+dur.each)
data$TBculttestDate <- apply(data, 1,
function(x) max(x["TBculttestDate"], x["TBculttestDate.resMin"], na.rm=T))
data$TBcultCens <- data$TBculttestDate!=data$TBculttestDate.orig
# time-to-events ----------------------------------------------------------
calcTimeToEvent <- function(testDate) difftime(testDate, data$testDate.min, units="days")
data <- transform(data,
TBconfirmed = (Diagoutcome%in%c("Active TB", "Active TB;Other")),
preCultDrug = (TBculttestDate>TBDrugStart.min),
preTestDrug = (testDate.min>TBDrugStart.min),
DrugCult_diff = round(difftime(TBculttestDate, TBDrugStart.min, units="days")),
testDrug_diff = calcTimeToEvent(TBDrugStart.min),
testDiagCon_diff = round(calcTimeToEvent(DateDiagCon)),
testCult_diff = calcTimeToEvent(TBculttestDate),
testCultorig_diff = calcTimeToEvent(TBculttestDate.orig),
EntryUKtest_diff = year(testDate.min) - EntryUK_year,
start.to.Smear = calcTimeToEvent(SmeartestDate),
start.to.HistBiop = calcTimeToEvent(HistBioptestDate),
start.to.TBcultorig = calcTimeToEvent(TBculttestDate.orig),
start.to.BAL = calcTimeToEvent(BALtestDate),
start.to.PCR = calcTimeToEvent(PCRtestDate),
start.to.TST = calcTimeToEvent(TSTtestDate),
start.to.CT = calcTimeToEvent(CTtestDate),
start.to.MRI = calcTimeToEvent(MRItestDate),
start.to.PET = calcTimeToEvent(PETtestDate),
start.to.QFN = calcTimeToEvent(QFNtestDate),
start.to.TSPOT = calcTimeToEvent(TSPOTtestDate),
start.to.FU = calcTimeToEvent(DateVisitFU)
)
# View(data.frame(data$PatientStudyID, data$testDate.min, data$DateVisitFU, data$DateVisitFU0, data$start.to.FU)[order(data$PatientStudyID),])  #check
data$start.to.Imaging <- pmax(data$start.to.CT, data$start.to.MRI, data$start.to.PET, na.rm=T)
data$start.to.IGRA <- pmax(data$start.to.QFN, data$start.to.TSPOT, na.rm=T)
## only interested in 2 month followup
# data$start.to.FU[data$VisitFU!="2 month FU"] <- NA
data$preTestDrug[is.na(data$preTestDrug)] <- FALSE
data$step1Diag <- (data$preCultDrug & !data$preTestDrug)
data$step1Diag[is.na(data$step1Diag)] <- FALSE
## remove previous TB and LTBI patients
##TODO##
## whats the field for this??
data <- fillInEndOfTreatmentDate(data)
data$TBDrug_diff <- difftime(data$TBDrugEnd.max, data$TBDrugStart.min, units="days")
## this isn't perfect because there may be treatment gaps but is an ok approximation
drugReviewPeriod <- twoMonths
data$treatResponse <- (as.numeric(data$TBDrug_diff) > drugReviewPeriod)
data$testDrug_diff_plus63days <- data$testDrug_diff + drugReviewPeriod
TBdrugStart.freq <- getDateFrequencies(TBdrugStart.names, data)
TBDrugEnd.freq <- getDateFrequencies(TBDrugEnd.names, data)
testDate.freq <- getDateFrequencies(testDate.names, data)
data <- estimateTimeToDiagnosis(data)
# BAL ---------------------------------------------------------------------
## split Smear and Culture in to 2 types BAL/non-BAL
data$SmearBAL <- data$Smear%in%c("BAL","bal")
data$SmearNonBAL <- !data$SmearBAL
data$TBcultBAL <- data$TBcultsite%in%c("BAL","bal")
data$TBcultnonBAL <- !data$TBcultBAL
data$IGRA <- as.factor(data$IGRA)
data$PET <- as.factor(data$PET)
data$imaging <- as.factor(data$imaging)
data$TSTres <- as.factor(data$TSTres)
data$IGRAorTST <- as.factor(data$IGRAorTST)
data <- addLevel_Nottaken(data, c("IGRA","imaging","Smear","TBcult","imaging","CXR","CT","CSF","BAL","QFN","TSPOT",
"HistBiop","NeedleAsp","PCR","MRI","TSTcut","PET","TSTres","IGRAorTST"))
data$Dosanjh <- as.factor(data$Dosanjh)
data$Dosanjh <- relevel(data$Dosanjh, ref="1")
data$Ethnclass <- relevel(data$Ethnclass, ref="White")
data$Country <- as.factor(data$Country)
data$Country <- relevel(data$Country, ref="ENGLAND")
data$Sex <- as.factor(data$Sex)
##TODO##
## what to do about TSTcut NA level?
data[,test.names][is.na(data[,test.names]) | data[,test.names]==""] <- "Not taken"
data$Country <- joinLevels(data$Country, list("UK"=c("ENGLAND","IRELAND","UNITED KINGDOM","WALES","SCOTLAND")))
data$Country[data$Country=="N/A"] <- NA
data$Country <- droplevels(data$Country)
#  new fields -------------------------------------------------------------
data$Alt_diag <- !data$TBconfirmed & !data$Diagoutcome%in%c("Indeterminate","Not given",NA,"")
data$jobrisk <- data$New_occupation=="Healthcare worker"
## group diagnosis outcomes
##TODO## do over-lapping groups
lookuplist <- list("LRTI"=c("LRTI",
"LTBI - treatment indicated",
"LTBI - treatment indicated;Other",
"LTBI - treatment indicated;Other;URTI",
"LTBI - treatment indicated;Other;Pneumonia",
"LTBI - treatment indicated;Pneumonia",
"LTBI - treatment indicated;URTI",
"LRTI;LTBI - treatment indicated;Other",
"LRTI;Other"),
"Cancer"=c("Cancer","Cancer;LTBI - treatment indicated", "Cancer;Other","Cancer;Other;Pneumonia"),
"Chest Infection"=c("Chest Infection", "Chest Infection;LTBI - treatment indicated", "Chest Infection;Other"),
"Other"=c("Other","Other;Pneumonia","Other;Sarcoidosis","Other;URTI"),
"Active TB"=c("Active TB", "Active TB;Other"))
data$DiagoutcomeGrouped <- data$Diagoutcome
lfac <- levels(data$DiagoutcomeGrouped)
othrlevs <- lfac[!lfac %in% unlist(lookuplist)]
x <- c(lookuplist, othrlevs)
names(x) <- c(names(lookuplist), othrlevs)
levels(data$DiagoutcomeGrouped) <- x
## group Dosanjh category 4
lookuplist <- list("1"=1,"2"=2,"3"=3,"4"=c("4A","4B","4C","4D"))
data$DosanjhGrouped <- data$Dosanjh
lfac <- levels(data$data$DosanjhGrouped)
othrlevs <- lfac[!lfac %in% unlist(lookuplist)]
x <- c(lookuplist, othrlevs)
names(x) <- c(names(lookuplist), othrlevs)
levels(data$DosanjhGrouped) <- x
# symptoms counts ----------------------------------------------------------
symptoms.names <- c("Cough","Fever","Ngtsweat","Wghtloss","Haemop","Leth","OtherAE1","OtherAE2","OtherAE3","OtherAE4","OtherAE5","OtherAE6")
data$numSymptoms <- apply(data[,symptoms.names],1,sum)#, na.rm=T)
## group number of symptoms
lookuplist <- list("1"=1,"2"=2,"3"=3,"4"=4, "5"=5, ">5"=c(6,7,8,9,10,11,12))
data$numSymptomsGrouped <- as.factor(data$numSymptoms)
lfac <- levels(data$data$numSymptomsGrouped)
othrlevs <- lfac[!lfac %in% unlist(lookuplist)]
x <- c(lookuplist, othrlevs)
names(x) <- c(names(lookuplist), othrlevs)
levels(data$numSymptomsGrouped) <- x
symptomsEndDates.names <- paste(symptoms.names, "End", sep="")
for (i in symptomsEndDates.names){
data[,i] <- as.Date.POSIX(data[,i])}
# symptoms resolved estimates ---------------------------------------------
data$Sx_resolved <- FALSE
## using `all' is conservative estimates
for (i in 1:nrow(data)){
cols <- symptomsEndDates.names[unlist(data[i,symptoms.names])]
if(all(is.na(cols))){   #no symptoms
data$Sx_resolved[i] <- FALSE
}else{
observedEndDates <- data[i, cols]
observedEndDates[is.na(observedEndDates)] <- as.Date("2020/01/01")       #replace missing with large dates
if(data$step1Diag[i]){
data$Sx_resolved[i] <- all(sapply(observedEndDates, function(x) (x - data$TBDrugStart.min[i])<drugReviewPeriod))      #response to treatment
## could alternatively have same as below?
## ...
}else{
# data$Sx_resolved[i] <- all(sapply(observedEndDates, function(x) x <= data[i,"TBculttestDate.orig"]))    #self-cured
data$Sx_resolved[i] <- all(sapply(observedEndDates, function(x) x <= data[i,"TBculttestDate"]))
}
}
}
# identify out-of-sequence tests ------------------------------------------
## which tests are after starting treatment?
x <- t(apply(data, 1, function(z) z[testDate.names[-1]] > z["TBDrugStart.min"]))
colnames(x) <- tests.postDrugStart <- paste(colnames(x),".postDrugStart", sep="")
## which tests are after culture result?
y <- t(apply(data, 1, function(z) z[testDate.names[-1]] > z["TBculttestDate"]))
colnames(y) <- tests.postCult <- paste(colnames(y),".postCult", sep="")
data <- data.frame(data, x, y)
data <- rmPatientsInCleaning(data)
data <- calcRiskFactorScore(data)
data <- droplevels(data)
source('C:/Users/ngreen1/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/clean-data-fns.R', echo=TRUE)
data <- readFromDatabaseExtract()
data <- cleanData(data)
library(IDEAdectree)
data <- readFromDatabaseExtract()
data <- cleanData(data)
save.image("C:/Users/ngreen1/Dropbox/TB/IDEA/R/packaged/IDEAdectree/data/TBdata_clinical_cleaned.RData")
data("TBdata_clinical_cleaned")
library(IDEAdectree)
data("TBdata_clinical_cleaned")
data$start.to.diag
data$PatientStudyID[ data$start.to.diag==735]
data$PatientStudyID[ data$start.to.diag==-99]
library(IDEAdectree)
library(IDEAdectree)
data <- readFromDatabaseExtract()
data <- cleanData(data)
save.image("C:/Users/ngreen1/Dropbox/TB/IDEA/R/packaged/IDEAdectree/data/TBdata_clinical_cleaned.RData")
data$start.to.diag
data$PatientStudyID[ data$start.to.diag==735]
data$PatientStudyID[ data$start.to.diag==-99]
table(data$start.to.diag)
table(is.na(data$start.to.diag))
data$PatientStudyID[ data$start.to.diag==-25]
data$PatientStudyID[ data$start.to.diag>100 | data$start.to.diag<0]
data$PatientStudyID[ data$start.to.diag>100 | data$start.to.diag<0 & !is.na(data$start.to.diag)]
data$PatientStudyID[ (data$start.to.diag>100 | data$start.to.diag<0) & !is.na(data$start.to.diag)]
data$start.to.diag
data$PatientStudyID[ (data$start.to.diag>100 | data$start.to.diag<0) & !is.na(data$start.to.diag)]
data$time.to.diag[ (data$start.to.diag>100 | data$start.to.diag<0) & !is.na(data$start.to.diag)]
data$start.to.diag[ (data$start.to.diag>100 | data$start.to.diag<0) & !is.na(data$start.to.diag)]
library(IDEAdectree)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
library(IDEAdectree)
library(IDEAdectree)
library("IDEAdectree", lib.loc="C:/Program Files/R/R-3.2.0/library")
library(IDEAdectree)
res.all <- join.stratifiedTimeToDiagTables(data)
head(data)
data("TBdata_clinical_cleaned")
res.all <- join.stratifiedTimeToDiagTables(data)
require(plyr)
pathdata <- get.allDataTestCombinations(data)   #summary(pathdata)
View(pathdata)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
pathdata <- get.allDataTestCombinations(data)   #summary(pathdata)
View(pathdata)
data.joined <- merge(data, pathdata)
View(data.joined)
View(pathdata)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
require(plyr)
pathdata <- create.indivpathmatrix(data)
data <- data.frame(data, pathdata)
pathdata <- get.uniqueDataTestCombinations(pathdata)   #summary(pathdata)
data.joined <- merge(data, pathdata)
data.joined$dummy <- "all"
data.joined$start.to.diag[data.joined$start.to.diag<0] <- NA
res.all <- join_all(dfs = list(get.meansdStartToDiagByCovariate("dummy", "all",0),
get.meansdStartToDiagByCovariate("DosanjhGrouped", "1",0),
get.meansdStartToDiagByCovariate("DosanjhGrouped", "2",0),
get.meansdStartToDiagByCovariate("DosanjhGrouped", "3",0),
get.meansdStartToDiagByCovariate("DosanjhGrouped", "4",0),
get.meansdStartToDiagByCovariate("Sex", "Male",0),
get.meansdStartToDiagByCovariate("Sex", "Female",0),
get.meansdStartToDiagByCovariate("HIVpos", 0,0),
get.meansdStartToDiagByCovariate("HIVpos", 1,0),
get.meansdStartToDiagByCovariate("Ethnclass", "White",0)),
type = "full", by = "pathID")
res.all <- merge(pathdata, res.all)
View(res.all)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
View(res.all)
write.csv(res.all, file="../../../output_data/pathway_timetodiag_summaries.csv")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedTimeToDiagTables(data)
write.csv(res.all, file="../../../output_data/pathway_timetodiag_summaries.csv")
View(res.all)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedTimeToDiagTables(data)
write.csv(res.all, file="../../../output_data/pathway_timetodiag_summaries.csv")
write.csv(res.all, file="../../../output_data/pathway_timetodiag_summaries.csv")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedTimeToDiagTables(data)
write.csv(res.all, file="../../../output_data/pathway_timetodiag_summaries.csv")
names(data)
data$totalcost
data <- data.frame(data, totalcost=calcPatientCostofTests(data[,c("TBcult", "Smear", "IGRA", "TST", "TSPOT", "QFN", "CXR", "CSF", "BAL", "HistBiop", "NeedleAsp", "PCR", "CT", "MRI", "PET")]))
data$totalcost
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
getwd()
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
View(res.all)
apply(res.all,2,class)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
?as.matrix
class(res.all)
data.matrix(res.all)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
View(res.all)
res.all[is.na(res.all)] <- ""
round(data.matrix(res.all),2)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
res.all[is.na(res.all)] <- ""
round(data.matrix(res.all),2)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
View(res.all)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
View(res.all)
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "totalcost")
data$totalcost
outcome="totalcost"
pathdata <- create.indivpathmatrix(data)
data <- data.frame(data, pathdata)
pathdata <- get.uniqueDataTestCombinations(pathdata)   #summary(pathdata)
data.joined <- merge(data, pathdata)
data.joined$dummy <- "all"
data.joined[,outcome][data.joined[,outcome]<0] <- NA
res.all <- join_all(dfs = list(get.meansdOutcomeByCovariate("dummy", "all", 0, outcome),
#                                  get.meansdOutcomeByCovariate("DosanjhGrouped", "1", 0, outcome),
#                                  get.meansdOutcomeByCovariate("DosanjhGrouped", "2", 0, outcome)),
get.meansdOutcomeByCovariate("DosanjhGrouped", "3", 0, outcome),
get.meansdOutcomeByCovariate("DosanjhGrouped", "4", 0, outcome)),
#                                  get.meansdOutcomeByCovariate("Sex", "Male", 0, outcome),
#                                  get.meansdOutcomeByCovariate("Sex", "Female", 0, outcome),
#                                  get.meansdOutcomeByCovariate("HIVpos", 0, 0, outcome),
#                                  get.meansdOutcomeByCovariate("HIVpos", 1, 0, outcome),
#                                  get.meansdOutcomeByCovariate("Ethnclass", "White", 0, outcome)),
type = "full", by = "pathID")
res.all <- merge(pathdata, res.all)
## separate pathway and stats tables
# merge(pathdata, get.meansdStartToDiagByCovariate("dummy", "all"))
# merge(pathdata, get.meansdStartToDiagByCovariate("DosanjhGrouped", "1"))
# merge(pathdata, get.meansdStartToDiagByCovariate("DosanjhGrouped", "2"))
# merge(pathdata, get.meansdStartToDiagByCovariate("DosanjhGrouped", "3"))
# merge(pathdata, get.meansdStartToDiagByCovariate("DosanjhGrouped", "4"))
# merge(pathdata, get.meansdStartToDiagByCovariate("Sex", "Male"))
# merge(pathdata, get.meansdStartToDiagByCovariate("Sex", "Female"))
# merge(pathdata, get.meansdStartToDiagByCovariate("HIVpos", 0))
# merge(pathdata, get.meansdStartToDiagByCovariate("HIVpos", 1))
# merge(pathdata, get.meansdStartToDiagByCovariate("Ethnclass", "White"))
round(data.matrix(res.all),2)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, outcome="totalcost")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createTimeToDiagnosisTable.R', echo=TRUE)
res.all <- join.stratifiedOutcomeTables(data, "start.to.diag")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
res.all <- join.stratifiedOutcomeTables(data, outcome="totalcost")
write.csv(res.all, file="../../../output_data/pathway_summaries.csv")
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createOutcomeTable.R', echo=TRUE)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createOutcomeTable.R', echo=TRUE)
library(IDEAdectree)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/estimateTimeToDiagnosis.R', echo=TRUE)
data("TBdata_clinical_cleaned")
data$Diagnostic_mean
levels(data$Diagnostic_mean)
View(estimateTimeToDiagnosis)
View(estimateTimeToDiagnosis)
table(data$Diagnostic_mean)
source('C:/Users/nathan.green/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/createOutcomeTable.R', echo=TRUE)
source('C:/Users/Nathan/Dropbox/TB/IDEA/R/packaged/IDEAdectree/R/clean-data-fns.R')
